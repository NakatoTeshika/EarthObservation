import time
import rasterio
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from skimage import measure

# –î–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
start_time = time.time()

print("üì• –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ GeoTIFF...")
file_path = r"C:\Users\Acer\Desktop\EO2\test1.tif"

with rasterio.open(file_path) as src:
    image_data = src.read()
    profile = src.profile
    transform = src.transform
    height, width = src.height, src.width

print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫.")

# üìå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
VV = image_data[0].astype(np.float32).flatten()
VH = image_data[2].astype(np.float32).flatten()
coh_VV = image_data[1].astype(np.float32).flatten()
coh_VH = image_data[3].astype(np.float32).flatten()

# üìå –í—ã—á–∏—Å–ª—è–µ–º NDFI
print("üßÆ –í—ã—á–∏—Å–ª—è–µ–º NDFI...")
ndfi = (VV - VH) / (VV + VH + 1e-6)  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

# üìå –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = np.column_stack((VV, VH, coh_VV, coh_VH, ndfi))

# üìå –ò—Å–∫–ª—é—á–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ —Å NoData (VV, VH, Coherence > 0)
mask = (VV > 0) & (VH > 0) & (coh_VV > 0) & (coh_VH > 0)
features = features[mask]
ndfi = ndfi[mask]

# üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è –ø–æ VV
labels = np.zeros_like(VV, dtype=np.uint8)
threshold_moderate = np.percentile(VV[mask], 70)
threshold_high = np.percentile(VV[mask], 90)

labels[VV > threshold_moderate] = 1  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ
labels[VV > threshold_high] = 2  # –°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ
labels = labels[mask]

print(f"üìä –ö–ª–∞—Å—Å—ã –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –í—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫.")

# üìå –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)

# üîπ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É)
num_samples = min(500000, len(X_train))  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 500K –ø–∏–∫—Å–µ–ª–µ–π
indices = np.random.choice(len(X_train), num_samples, replace=False)

X_train_subset = X_train[indices]
y_train_subset = y_train[indices]

print(f"üìâ –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ {num_samples} –ø–∏–∫—Å–µ–ª—è—Ö.")

# üîπ –û–±—É—á–∞–µ–º RandomForest —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤
clf = RandomForestClassifier(n_estimators=30, max_depth=8, n_jobs=-1, random_state=42)

# üîπ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –±–∞—Ç—á–∞–º–∏
batch_size = 100000
for i in range(0, len(X_train_subset), batch_size):
    X_batch = X_train_subset[i:i + batch_size]
    y_batch = y_train_subset[i:i + batch_size]

    print(f"üîÑ –û–±—É—á–µ–Ω–∏–µ –±–∞—Ç—á–∞ {i // batch_size + 1}/{len(X_train_subset) // batch_size + 1}")
    clf.fit(X_batch, y_batch)

print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫.")

# üìå –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.4f}")

# üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
print("üñºÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
predicted_labels = clf.predict(features)
classified_image = np.zeros(VV.shape, dtype=np.uint8)
classified_image[mask] = predicted_labels

output_file = "flood_classification_ndfi.tif"
with rasterio.open(output_file, 'w', **profile) as dst:
    dst.write(classified_image.reshape(height, width), 1)

print(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}.")

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
flood_mask = np.zeros_like(classified_image, dtype=np.uint8)
flood_mask[classified_image == 1] = 1  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ
flood_mask[classified_image == 2] = 2  # –°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ

# üìå –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è
plt.figure(figsize=(10, 6))
plt.imshow(flood_mask.reshape(height, width), cmap="Reds", interpolation="nearest")
plt.colorbar(label="0 = –°—É—à–∞, 1 = –£–º–µ—Ä–µ–Ω–Ω–æ–µ, 2 = –°–∏–ª—å–Ω–æ–µ")
plt.title("–ú–∞—Å–∫–∞ –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–æ–Ω")
plt.show()

# üìå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è
if np.any(flood_mask):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
    contours = measure.find_contours(flood_mask.reshape(height, width), 0.5)

    # üìå –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è
    plt.figure(figsize=(10, 6))
    plt.imshow(classified_image.reshape(height, width), cmap='gray', interpolation='nearest')
    plt.colorbar(label="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (0=—Å—É—à–∞, 1=—É–º–µ—Ä–µ–Ω–Ω–æ, 2=—Å–∏–ª—å–Ω–æ)")
    plt.title("–ö–æ–Ω—Ç—É—Ä—ã –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–æ–Ω")

    for contour in contours:
        plt.plot(contour[:, 1], contour[:, 0], linewidth=2, color='red')

    plt.show()
else:
    print("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–æ–Ω, –∫–æ–Ω—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è –≤ TIFF
output_flood_mask = "flood_mask.tif"
profile.update(dtype=rasterio.uint8, count=1)

with rasterio.open(output_flood_mask, 'w', **profile) as dst:
    dst.write(flood_mask.reshape(height, width), 1)

print(f"‚úÖ –§–∞–π–ª —Å –º–∞—Å–∫–æ–π –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_flood_mask}")

