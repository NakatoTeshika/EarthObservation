import time
import rasterio
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns  # –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, cohen_kappa_score
from skimage import measure

# –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
start_time = time.time()

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ GeoTIFF-—Ñ–∞–π–ª–∞
print("üì• –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ GeoTIFF...")
file_path = r"C:\Users\Acer\Desktop\EO2\test1.tif"

with rasterio.open(file_path) as src:
    image_data = src.read()      # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    profile = src.profile        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
    transform = src.transform    # –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∏–∫—Å–µ–ª—è
    height, width = src.height, src.width

print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫.")

# 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–Ω–∞–ª—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Ç–∞–∫: [VV, coh_VV, VH, coh_VH]
VV      = image_data[0].astype(np.float32).flatten()
coh_VV  = image_data[1].astype(np.float32).flatten()
VH      = image_data[2].astype(np.float32).flatten()
coh_VH  = image_data[3].astype(np.float32).flatten()

# 3. –í—ã—á–∏—Å–ª—è–µ–º NDFI (Normalized Difference Flood Index)
print("üßÆ –í—ã—á–∏—Å–ª—è–µ–º NDFI...")
ndfi = (VV - VH) / (VV + VH + 1e-6)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

# 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏: VV, VH, coh_VV, coh_VH, ndfi
features = np.column_stack((VV, VH, coh_VV, coh_VH, ndfi))

# –ò—Å–∫–ª—é—á–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∑–Ω–∞—á–µ–Ω–∏—è <= 0)
mask = (VV > 0) & (VH > 0) & (coh_VV > 0) & (coh_VH > 0)
features = features[mask]

# 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
# –û–±—ã—á–Ω–æ –≤–æ–¥–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è VV.
# –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ 30-–≥–æ –∏ 10-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è):
# 0 ‚Äì –°—É—à–∞, 1 ‚Äì –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ, 2 ‚Äì –°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ
threshold_moderate = np.percentile(VV[mask], 30)  # –ø–æ—Ä–æ–≥ –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è
threshold_strong   = np.percentile(VV[mask], 10)   # –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è

labels = np.zeros_like(VV, dtype=np.uint8)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 = –°—É—à–∞
labels[VV < threshold_moderate] = 1         # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ‚Äì –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ
labels[VV < threshold_strong]   = 2         # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—â—ë –Ω–∏–∂–µ ‚Äì –°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ
labels = labels[mask]

print(f"üìä –ö–ª–∞—Å—Å—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –í—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫.")
print(f"–ü–æ—Ä–æ–≥ —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è (30-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å): {threshold_moderate:.4f}")
print(f"–ü–æ—Ä–æ–≥ —Å–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è (10-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å): {threshold_strong:.4f}")

# 6. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: 70% –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, 30% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–¥–æ 500000), —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
num_samples = min(500000, len(X_train))
indices = np.random.choice(len(X_train), num_samples, replace=False)
X_train_subset = X_train[indices]
y_train_subset = y_train[indices]

print(f"üìâ –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ {num_samples} –ø–∏–∫—Å–µ–ª—è—Ö.")

# 7. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ RandomForest
clf = RandomForestClassifier(n_estimators=30, max_depth=8, n_jobs=-1, random_state=42)
clf.fit(X_train_subset, y_train_subset)

print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫.")

# 8. Accuracy Assessment –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
y_pred = clf.predict(X_test)
overall_accuracy = accuracy_score(y_test, y_pred)
print(f"\nüéØ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (Overall Accuracy): {overall_accuracy*100:.2f}%")

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ø–ø–∞
kappa = cohen_kappa_score(y_test, y_pred)
print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ø–ø–∞ (Kappa Coefficient): {kappa:.4f}")

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (Confusion Matrix)
cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)

# –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (Producer's Accuracy, PA) –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (User's Accuracy, UA)
pa = np.diag(cm) / np.sum(cm, axis=1)
ua = np.diag(cm) / np.sum(cm, axis=0)
for i, (p, u) in enumerate(zip(pa, ua)):
    print(f"Class {i}: Producer's Accuracy = {p*100:.2f}%, User's Accuracy = {u*100:.2f}%")

# –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
plt.figure(figsize=(8, 6))
class_names = ["–°—É—à–∞", "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ", "–°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ"]
# –ò—Å–ø–æ–ª—å–∑—É–µ–º colormap "YlOrRd", —á—Ç–æ–±—ã —Ü–≤–µ—Ç–∞ –±—ã–ª–∏ –±–æ–ª–µ–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏
sns.heatmap(cm, annot=True, fmt='d', cmap="YlOrRd", xticklabels=class_names, yticklabels=class_names)
plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏")
plt.ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏")
plt.title(f"Confusion Matrix\nOverall Accuracy = {overall_accuracy*100:.2f}%")
plt.show()

# 9. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
print("\nüñºÔ∏è –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º...")
chunk_size = 1_000_000  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞; –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
num_chunks = (features.shape[0] + chunk_size - 1) // chunk_size
predicted_labels = np.empty(features.shape[0], dtype=np.uint8)

for i in range(num_chunks):
    start_idx = i * chunk_size
    end_idx = min(start_idx + chunk_size, features.shape[0])
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i+1} –∏–∑ {num_chunks}...")
    predicted_labels[start_idx:end_idx] = clf.predict(features[start_idx:end_idx])

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
classified_image = np.zeros(VV.shape, dtype=np.uint8)
classified_image[mask] = predicted_labels

# 10. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ TIFF
output_file = "flood_classification_ndfi.tif"
with rasterio.open(output_file, 'w', **profile) as dst:
    dst.write(classified_image.reshape(height, width), 1)

print(f"\n‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}.")

# 11. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
# –ó–¥–µ—Å—å: 0 = –°—É—à–∞, 1 = –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ, 2 = –°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ
flood_mask = np.copy(classified_image)

# 12. –†–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è (–ø–∏–∫—Å–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞)
pixel_width  = abs(transform.a)
pixel_height = abs(transform.e)  # –û–±—ã—á–Ω–æ transform.e –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º abs
area_per_pixel = pixel_width * pixel_height  # –≤ –∫–≤. –º–µ—Ç—Ä–∞—Ö

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ (—É—á–∏—Ç—ã–≤–∞—è —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏, –≥–¥–µ mask=True)
non_flooded_pixels    = np.count_nonzero(classified_image[mask] == 0)
moderate_flooded_pixels = np.count_nonzero(classified_image[mask] == 1)
strong_flooded_pixels   = np.count_nonzero(classified_image[mask] == 2)
total_pixels = non_flooded_pixels + moderate_flooded_pixels + strong_flooded_pixels

non_flooded_area    = non_flooded_pixels * area_per_pixel
moderate_flooded_area = moderate_flooded_pixels * area_per_pixel
strong_flooded_area   = strong_flooded_pixels * area_per_pixel
total_area = non_flooded_area + moderate_flooded_area + strong_flooded_area

non_flooded_perc    = (non_flooded_area / total_area) * 100
moderate_flooded_perc = (moderate_flooded_area / total_area) * 100
strong_flooded_perc   = (strong_flooded_area / total_area) * 100

print("\nüó∫Ô∏è –ü–ª–æ—â–∞–¥—å –ø–æ –∫–ª–∞—Å—Å–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π):")
print(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {total_area:,.2f} –∫–≤.–º.")
print(f"–°—É—à–∞: {non_flooded_area:,.2f} –∫–≤.–º. ({non_flooded_perc:.2f}%)")
print(f"–£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ: {moderate_flooded_area:,.2f} –∫–≤.–º. ({moderate_flooded_perc:.2f}%)")
print(f"–°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ: {strong_flooded_area:,.2f} –∫–≤.–º. ({strong_flooded_perc:.2f}%)")

# 13. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è
plt.figure(figsize=(10, 6))
plt.imshow(flood_mask.reshape(height, width), cmap="YlGnBu", interpolation="nearest")
plt.colorbar(label="0 = –°—É—à–∞, 1 = –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ, 2 = –°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ")
plt.title("–ó–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏")
plt.show()

# 14. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤ –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–æ–Ω
if np.any(flood_mask):
    contours = measure.find_contours(flood_mask.reshape(height, width), 0.5)
    plt.figure(figsize=(10, 6))
    plt.imshow(classified_image.reshape(height, width), cmap='gray', interpolation='nearest')
    plt.colorbar(label="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (0 = –°—É—à–∞, 1 = –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ, 2 = –°–∏–ª—å–Ω–æ–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ)")
    plt.title("–ö–æ–Ω—Ç—É—Ä—ã –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–æ–Ω")
    for contour in contours:
        plt.plot(contour[:, 1], contour[:, 0], linewidth=2, color='red')
    plt.show()
else:
    print("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–æ–Ω, –∫–æ–Ω—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# 15. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π TIFF-—Ñ–∞–π–ª
output_flood_mask = "flood_mask.tif"
profile.update(dtype=rasterio.uint8, count=1)
with rasterio.open(output_flood_mask, 'w', **profile) as dst:
    dst.write(flood_mask.reshape(height, width), 1)

print(f"‚úÖ –§–∞–π–ª —Å –º–∞—Å–∫–æ–π –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_flood_mask}")
